#!/usr/bin/env node

var _         = require('underscore')._,
    program   = require('commander'),
    retire    = require('../lib/retire'),
    repo      = require('../lib/repo'),
    resolve   = require('../lib/resolve'),
    scanner   = require('../lib/scanner'),
    os        = require('os'),
    path      = require('path'),
    emitter   = new require('events').EventEmitter;

var events = new emitter();
var jsRepo = null;
var nodeRepo = null;
var vulnsFound = false;

scanner.on('vulnerable-dependency-found', function() {
  vulnsFound = true;
});


/*
 * Parse command line flags.
 */
program
  .version(retire.version)
  .option('')
  .option('-p, --package', 'limit node scan to packages where parent is mentioned in package.json (ignore node_modules)')
  .option('-n, --node',    'Run node dependency scan only')
  .option('-j, --js',      'Run scan of JavaScript files only')
  .option('-v, --verbose', 'Show identified files (by default only vulnerable files are shown)')
  .option('-x, --dropexternal', "Don't include project provided vulnerability repository")
  .option('-c, --nocache', "Don't use local cache")
  .option('')
  .option('--jspath <path>', 'Folder to scan for javascript files')
  .option('--nodepath <path>', 'Folder to scan for node files')
  .option('--path <path>', 'Folder to scan for both')
  .option('--jsrepo <path>', 'Local version of repo')
  .option('--noderepo <path>', 'Local version of repo')
  .option('--proxy <url>', 'Proxy url (http://some.sever:8080)')
  .option('--ignore <paths>', 'Comma delimited list of paths to ignore')
  .parse(process.argv);

var config = _.extend({ path: '.' }, _.pick(program, [
  'package', 'node', 'js', 'jspath', 'verbose', 'nodepath', 'path', 'jsrepo', 'noderepo', 
  'dropexternal', 'nocache', 'proxy', 'ignore'
]));

if (!config.nocache) {
  config.cachedir = path.resolve(os.tmpdir(), '.retire-cache/');
}
config.ignore = config.ignore ? _.map(config.ignore.split(','), function(e) { return path.resolve(e); }) : [];


events.on('load-js-repo', function() {
  (config.jsrepo
    ? loader = repo.loadrepositoryFromFile(config.jsrepo, config)
    :repo.loadrepository('https://raw.github.com/bekk/retire.js/master/repository/jsrepository.json', config)
  ).on('done', function(repo) {
      jsRepo = repo;
      events.emit('js-repo-loaded');
  });
});


events.on('load-node-repo', function() {
  (config.noderepo
    ? repo.loadrepositoryFromFile(config.noderepo, config)
    : repo.loadrepository('https://raw.github.com/bekk/retire.js/master/repository/npmrepository.json', config)
  ).on('done', function(repo) {
      nodeRepo = repo;
      events.emit('node-repo-loaded');
  });
});

events.on('js-repo-loaded', function() {
  events.emit(config.js ? 'scan-js' : 'load-node-repo');
});

events.on('node-repo-loaded', function() {
  events.emit(config.node ? 'scan-node' : 'scan-js');
});


events.on('scan-js', function() {
  resolve.scanJsFiles(config.jspath || config.path).on('jsfile', function(file) {
    scanner.scanJsFile(file, jsRepo, config);
  }).on('end', function() {
    events.emit('js-scanned');
  });
});

events.on('scan-node', function() {
  resolve.getNodeDependencies(config.nodepath || config.path, config.package).on('done', function(dependencies) {
    scanner.scanDependencies(dependencies, nodeRepo, config);
    events.emit('scan-done');
  });
});

events.on('js-scanned', function() {
  events.emit(!config.js ? 'scan-node' : 'scan-done');
});

events.on('scan-done', function() {
  process.exit(vulnsFound ? 1 : 0);
});

if (config.node) {
  events.emit('load-node-repo');
} else {
  events.emit('load-js-repo');
}

