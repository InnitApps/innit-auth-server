{
  "name": "modinha",
  "description": "Modinha is a toolkit for creating persisted models in Nodejs.",
  "author": {
    "name": "Christian Smith",
    "email": "smith@anvil.io",
    "url": "http://anvil.io"
  },
  "version": "0.0.20",
  "repository": {
    "type": "git",
    "url": "https://github.com/christiansmith/Modinha.git"
  },
  "main": "./lib/Modinha.js",
  "license": "MIT",
  "devDependencies": {
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.1",
    "grunt-mocha-cov": "0.0.7",
    "chai": "~1.7.2",
    "grunt-release": "~0.5.1",
    "coffee-script": "~1.6.3",
    "sinon-chai": "~2.4.0",
    "sinon": "~1.7.3"
  },
  "dependencies": {
    "underscore": "~1.5.1",
    "revalidator": "~0.1.5",
    "async": "~0.2.9",
    "node-uuid": "~1.4.1"
  },
  "bugs": {
    "url": "https://github.com/christiansmith/Modinha/issues"
  },
  "readme": "# Modinha\n\nModinha is a toolkit for creating persisted models. This is for programmers who like to work from the bottom up, building up persistence code from low level drivers, such as node_redis. Modinha provides:\n\n* Schema-based validation\n* Model inheritance\n* Model extension (mixins)\n* Flexible serialization/deserialization\n* Literal and functional default value definition\n* Private value protection\n* Selection (initialize a subset of an object)\n* Mapping (initialize an object from a different data model)\n* Optional null values (normalize empty query results)\n* More\n\n\n\n### Installation and Usage\n\n#### Install\n\n    $ npm install modinha\n\n\n#### Require\n\n    var Modinha = require('modinha');\n\n\n#### Define a model based on a schema\n\n    var Account = Modinha.define({\n      _id:      { type: 'string', default: Modinha.default.uuid },\n      name:     { type: 'string' },\n      email:    { type: 'string', required: true, format: 'email' },\n      hash:     { type: 'string', required: true, private: true },\n      created:  { type: 'string', default: Modinha.default.timestamp, format: 'utc-millisec' }\n    });\n\n`Modinha.define()` optionally takes a collection name as the first argument and will assign the value of that argument to the new model's static `collection` property.\n\n    Modinha.define('accounts', schema);\n\n\n#### Create an instance\n\n    var account = new Account({ email: 'john@smith.com' }, options);\n\n\n#### Validation\n\nValidate an uninitialized object against the model's schema.\n\n    Account.validate({...})\n\nValidate an instance.\n\n    var account = new Account({...})\n      , validation = account.validate()\n\n\n#### Initializing Objects\n\nLike the constructor, a model's static initialize method takes data and options arguments. \n    \nWith a null or undefined data argument, initialize will return an instance of the model with default values.\n\n    Account.initialize()\n\nFor cases where this is undesirable, such as initializing database results, use the nullify option\n\n    Account.initialize(undefined, { nullify: true })\n\nLike the constructor, initialize will set any properties you provide that are defined in the schema.\n\n    Account.initialize({ email: 'john@example.com' })\n\nDefault values will not be set if values for the property are provided.\n\n    Account.initialize({ _id: '...', email: 'john@example.com' })\n\nProperties not defined in the schema are ignored.\n\n    Account.initialize({ hacker: 'p0wn3d' })\n\nPrivate schema properties are also ignored by default. This is to prevent accidental disclosure of sensitive values, such as hashed passwords. To include private values in an instance, set the private option to true.\n\n    Account.initialize({ hash: 'secret', ... }, { private: true })\n\nUnlike the constructor, the static initialize method can also instantiate multiple objects in one call, parse json, and any combination of the two.\n\n    Account.initialize([{...},{...},{...}])\n    Account.initialize('{ \"json\": true }')\n    Account.initialize('[{},{},{}]')\n    Account.initialize(['{}', '{}'])\n    \n    \n#### Mappings\n\nPass a mapping in the options.\n\n    Account.initialize({ facebook: { bs: {}, id: '...' } }, { map: { '_id': 'facebook.id' } })\n\nOr predefine named mappings:\n\n    Account.maps.facebook = {\n      '_id': 'facebook.id'\n    };\n\n    Account.initialize(fbData, { map: 'facebook' });\n\n\n#### Selections\n\nGet a subset of an object.\n\n    Account.initialize({...}, { select: ['name', 'email'] });\n\n\n#### Merging objects\n\nMerge works identical to initialize, except that it mutates an existing instance instead of creating a new one.\n\n    var account = new Account({...});\n    account.merge(data, { map: 'facebook' });\n\n\n#### Serialization and deserialization\n\nBy default, Modinha models serialize and deserialize JSON. These methods can be overridden to store data in a different format. For example, we might want to use [MessagePack](http://msgpack.org/) or [CSV](https://tools.ietf.org/html/rfc4180), or perhaps compress the data with [snappy](https://code.google.com/p/snappy/).\n\n      Account.serialize = function (object) {\n        return msgpack.pack(object);\n      };\n\n      Account.deserialize = function (data) {\n        return msgpack.unpack(data);\n      };\n\n\n#### Augment the model\n\nThis model can be easily augmented with static and prototype methods.\n\n    Account.create = function (data, options, callback) {\n      // ...\n    };\n\n    Account.prototype.save = function (data, options, callback) {\n      // ...\n    };\n\nWhen a model requires many methods that are general and identical to other models, duplication can be avoided by extending the model with mixins.\n\n\n#### Extend the model\n\nPass in a \"class\" (constructor) or explicit prototype and static augmentations.\n\n    Model.extend(SomethingToMixin)\n    Model.extend(proto, static);\n\n\n#### Inherit from a model\n\n    var Admin = Account.inherit(proto, static);\n\n\n\n## The MIT License\n\nCopyright (c) 2013 Christian Smith http://anvil.io\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/christiansmith/Modinha",
  "_id": "modinha@0.0.20",
  "dist": {
    "shasum": "4f11cc0a56ce2e6863e4d66b28eca133ee5250cc"
  },
  "_from": "modinha@0.0.20",
  "_resolved": "https://registry.npmjs.org/modinha/-/modinha-0.0.20.tgz"
}
